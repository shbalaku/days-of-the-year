'use strict';

/** @ignore */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CiscoSpark = require('./CiscoSpark');

/**
 * Spark Rooms
 * @see https://developer.ciscospark.com/resource-rooms.html
 */

var Rooms = function (_CiscoSpark) {
  _inherits(Rooms, _CiscoSpark);

  /**
   * @constructor
   * @param {string} [accessToken] - Your Cisco Spark accesstoken
   * @param {string} [userAgent] - User Agent request header
   */
  function Rooms(accessToken, userAgent) {
    _classCallCheck(this, Rooms);

    /** @private */
    var _this = _possibleConstructorReturn(this, (Rooms.__proto__ || Object.getPrototypeOf(Rooms)).call(this, accessToken, userAgent, 'https://api.ciscospark.com/v1/rooms'));

    _this.idName = 'roomId';
    return _this;
  }

  /**
   * List Rooms
   *
   * @override
   * @param {Object} params - see https://developer.ciscospark.com/endpoint-rooms-get.html
   * @param {requestCallback} callback
   */


  _createClass(Rooms, [{
    key: 'list',
    value: function list(params, callback) {
      if (typeof params === 'string') {
        params = { teamId: params };
      }
      return _get(Rooms.prototype.__proto__ || Object.getPrototypeOf(Rooms.prototype), 'list', this).call(this, params, callback);
    }

    /**
     * Create a Room
     *
     * @override
     * @param {Object} params - see https://developer.ciscospark.com/endpoint-rooms-post.html
     * @param {requestCallback} callback
     */

  }, {
    key: 'create',
    value: function create(params, callback) {
      if (typeof params === 'string') {
        params = { title: params };
      }
      if (!params || !params.title) return callback(new Error('Invalid Params. Require title'));
      return _get(Rooms.prototype.__proto__ || Object.getPrototypeOf(Rooms.prototype), 'create', this).call(this, params, callback);
    }
  }]);

  return Rooms;
}(CiscoSpark);

module.exports = Rooms;