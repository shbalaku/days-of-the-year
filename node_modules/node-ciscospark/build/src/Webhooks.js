'use strict';

/** @ignore */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CiscoSpark = require('./CiscoSpark');

/**
 * Spark Teams
 * @see https://developer.ciscospark.com/resource-webhooks.html
 */

var Webhooks = function (_CiscoSpark) {
  _inherits(Webhooks, _CiscoSpark);

  /**
   * @constructor
   * @param {string} [accessToken] - Your Cisco Spark accesstoken
   * @param {string} [userAgent] - User Agent request header
   */
  function Webhooks(accessToken, userAgent) {
    _classCallCheck(this, Webhooks);

    /** @private */
    var _this = _possibleConstructorReturn(this, (Webhooks.__proto__ || Object.getPrototypeOf(Webhooks)).call(this, accessToken, userAgent, 'https://api.ciscospark.com/v1/webhooks'));

    _this.idName = 'webhookId';
    return _this;
  }

  return Webhooks;
}(CiscoSpark);

module.exports = Webhooks;